<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deno 代理测试</title>
    <!-- 引入 Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* 使用 Inter 字体 */
        body {
            font-family: "Inter", sans-serif;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-100 to-purple-200 min-h-screen flex items-center justify-center p-4">
    <div class="bg-white p-8 rounded-2xl shadow-xl max-w-md w-full text-center border border-gray-200">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Deno 代理状态检查</h1>

        <p class="text-gray-600 mb-6">点击下方按钮，测试您的 Deno Deploy 代理 (<span class="font-semibold text-blue-600">large-alpaca-41.deno.dev</span>) 是否可以连接到 Gemini API。</p>

        <button id="testButton" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300">
            测试代理
        </button>

        <div id="statusMessage" class="mt-8 p-4 rounded-lg text-lg font-medium hidden">
            <!-- 状态消息将显示在这里 -->
        </div>

        <div class="mt-8 text-sm text-gray-500">
            <p>请确保将 `YOUR_API_KEY` 替换为您真实的 Gemini API 密钥。</p>
            <p>您可以在 Deno Deploy 控制台查看代理的详细日志。</p>
        </div>
    </div>

    <script>
        // 获取 DOM 元素
        const testButton = document.getElementById('testButton');
        const statusMessage = document.getElementById('statusMessage');

        // 定义您的 Deno Deploy 代理 URL
        // **重要：请将 YOUR_API_KEY 替换为您真实的 Gemini API 密钥**
        const PROXY_URL = "https://large-alpaca-41.deno.dev/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDmGfx7r-MP8XglVrGkcG51JtTsqSH31uI";

        // 定义一个简单的请求体
        const requestBody = {
            contents: [
                {
                    parts: [
                        { text: "Hello, proxy test!" }
                    ]
                }
            ]
        };

        // 按钮点击事件监听器
        testButton.addEventListener('click', async () => {
            // 清除之前的状态消息并显示加载状态
            statusMessage.textContent = '正在测试...请稍候。';
            statusMessage.className = 'mt-8 p-4 rounded-lg text-lg font-medium bg-blue-100 text-blue-800 block'; // 显示并设置为蓝色
            testButton.disabled = true; // 禁用按钮防止重复点击

            try {
                // 发送 POST 请求到您的 Deno 代理
                const response = await fetch(PROXY_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });

                // 检查响应状态
                if (response.ok) {
                    // 如果响应状态码是 2xx (成功)，尝试解析 JSON
                    const data = await response.json();
                    if (data && data.candidates && data.candidates.length > 0) {
                        statusMessage.textContent = `代理工作正常！收到的响应示例: ${data.candidates[0].content.parts[0].text.substring(0, 50)}...`;
                        statusMessage.className = 'mt-8 p-4 rounded-lg text-lg font-medium bg-green-100 text-green-800 block'; // 成功显示绿色
                    } else {
                        statusMessage.textContent = `代理工作正常，但 Gemini API 返回了意外的响应结构。状态码: ${response.status}`;
                        statusMessage.className = 'mt-8 p-4 rounded-lg text-lg font-medium bg-yellow-100 text-yellow-800 block'; // 警告显示黄色
                    }
                } else {
                    // 如果响应状态码不是 2xx，表示有错误
                    const errorText = await response.text();
                    statusMessage.textContent = `代理连接成功，但 Gemini API 返回错误！状态码: ${response.status}。错误信息: ${errorText.substring(0, 100)}...`;
                    statusMessage.className = 'mt-8 p-4 rounded-lg text-lg font-medium bg-red-100 text-red-800 block'; // 错误显示红色
                }
            } catch (error) {
                // 捕获网络或其他错误 (例如，代理服务器根本无法访问)
                statusMessage.textContent = `无法连接到 Deno 代理。请检查代理是否已部署且正在运行。错误: ${error.message}`;
                statusMessage.className = 'mt-8 p-4 rounded-lg text-lg font-medium bg-red-100 text-red-800 block'; // 错误显示红色
            } finally {
                testButton.disabled = false; // 重新启用按钮
            }
        });
    </script>
</body>
</html>
